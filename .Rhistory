library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",main = "Revenue chart",border = "red")
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
iris
summary(iris)
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",main = "Revenue chart",border = "red")
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
iris
summary(iris)
plot(iris)
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",main = "Revenue chart",border = "red")
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-data.frame(mydata1$state)
ts<-data.frame(mydata1$total_sales)
plot(s,ts)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-data.frame(mydata1$state)
ts<-data.frame(mydata1$total_sales)
barplot(s,ts)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
barplot(s,ts)
runApp('uitest.R')
runApp('uitest.R')
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
barplot(s,ts)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
plot(s,ts)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
state<-unique(state)
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
state<-unique(state)
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="state versus total sales",
xlab="total sales", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
library(shiny)
library(gdata)
library(plyr)
library(ggplot2)
library(shiny)
mydata1 = read.csv("C:\\Users\\BPO18\\Documents\\Book1.csv")
state<-unique(state)
s<-c(mydata1$state)
ts<-c(mydata1$total_sales)
counts <- table(s, ts)
barplot(counts, main="state versus total sales",
xlab="total sales", col=c("darkblue","red","yellow"),
legend = rownames(counts), beside=TRUE)
runApp('uitest.R')
shiny::runApp('testfile')
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
runApp('testfile')
runApp('uitest.R')
install.packages("dplyr")
library(shiny); runApp('uitest.R')
runApp('uitest.R')
runApp('uitest.R')
runApp('testfile')
runApp('uitest.R')
runApp('uitest.R')
runApp('uitest.R')
runApp('uitest.R')
runApp('testfile')
runApp('testfile')
runApp('uitest.R')
runApp('uitest.R')
library(shiny); runApp('uitest.R')
shiny::runApp('gformmimick')
runApp('gformmimick')
runApp('gformmimick')
shinyjs::useShinyjs()
runApp('gformmimick')
runApp('gformmimick')
runApp('gformmimick')
runApp('uitest.R')
runApp('uitest.R')
runApp('uitest.R')
runApp('uitest.R')
runApp('gformmimick')
runApp('~/statevssalesvssalesman.R')
runApp('statevssalesvssalesman.R')
library(shiny); runApp('ab.R')
install.packages("magrittr")
library(shiny); runApp('ab.R')
runApp('ab.R')
library(shiny)
library(gdata)
library(dplyr)
library(ggplot2)
library(shiny)
shinyUI(
fluidPage(
titlePanel("Dynamically generated user interface components"),
fluidRow(
column(3, wellPanel(
selectInput("input_type", "Input type",
c("slider", "text", "numeric", "checkbox",
"checkboxGroup", "radioButtons", "selectInput",
"selectInput (multi)", "date", "daterange"
)
)
)),
column(3, wellPanel(
# This outputs the dynamic UI component
uiOutput("ui")
)),
column(3,
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("dynamic_value")
)
)
))
shinyServer <-(function(input, output) {
output$ui <- renderUI({
if (is.null(input$input_type))
return()
# Depending on input$input_type, we'll generate a different
# UI component and send it to the client.
switch(input$input_type,
"slider" = sliderInput("dynamic", "Dynamic",
min = 1, max = 20, value = 10),
"text" = textInput("dynamic", "Dynamic",
value = "starting value"),
"numeric" =  numericInput("dynamic", "Dynamic",
value = 12),
"checkbox" = checkboxInput("dynamic", "Dynamic",
value = TRUE),
"checkboxGroup" = checkboxGroupInput("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = "option2"
),
"radioButtons" = radioButtons("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = "option2"
),
"selectInput" = selectInput("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = "option2"
),
"selectInput (multi)" = selectInput("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = c("option1", "option2"),
multiple = TRUE
),
"date" = dateInput("dynamic", "Dynamic"),
"daterange" = dateRangeInput("dynamic", "Dynamic")
)
})
output$input_type_text <- renderText({
input$input_type
})
output$dynamic_value <- renderPrint({
str(input$dynamic)
})
})
shinyUI(
fluidPage(
titlePanel("Dynamically generated user interface components"),
fluidRow(
column(3, wellPanel(
selectInput("input_type", "Input type",
c("slider", "text", "numeric", "checkbox",
"checkboxGroup", "radioButtons", "selectInput",
"selectInput (multi)", "date", "daterange"
)
)
)),
column(3, wellPanel(
# This outputs the dynamic UI component
uiOutput("ui")
)),
column(3,
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("dynamic_value")
)
)
))
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('primarysalesdata')
runApp('gformmimick/newtest.R')
runApp('ab.R')
runApp('ab.R')
runApp('C:/Users/BPO18/Downloads')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('statevssalesvssalesman.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
library(shiny)
library(gdata)
library(dplyr)
library(ggplot2)
library(shiny)
shinyUI(
fluidPage(
titlePanel("Dynamically generated user interface components"),
fluidRow(
column(3, wellPanel(
selectInput("input_type", "Input type",
c("slider", "text", "numeric", "checkbox",
"checkboxGroup", "radioButtons", "selectInput",
"selectInput (multi)", "date", "daterange"
)
)
)),
column(3, wellPanel(
# This outputs the dynamic UI component
uiOutput("ui")
)),
column(3,
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("dynamic_value")
)
)
))
shinyServer <-(function(input, output) {
output$ui <- renderUI({
if (is.null(input$input_type))
return()
# Depending on input$input_type, we'll generate a different
# UI component and send it to the client.
switch(input$input_type,
"slider" = sliderInput("dynamic", "Dynamic",
min = 1, max = 20, value = 10),
"text" = textInput("dynamic", "Dynamic",
value = "starting value"),
"numeric" =  numericInput("dynamic", "Dynamic",
value = 12),
"checkbox" = checkboxInput("dynamic", "Dynamic",
value = TRUE),
"checkboxGroup" = checkboxGroupInput("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = "option2"
),
"radioButtons" = radioButtons("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = "option2"
),
"selectInput" = selectInput("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = "option2"
),
"selectInput (multi)" = selectInput("dynamic", "Dynamic",
choices = c("Option 1" = "option1",
"Option 2" = "option2"),
selected = c("option1", "option2"),
multiple = TRUE
),
"date" = dateInput("dynamic", "Dynamic"),
"daterange" = dateRangeInput("dynamic", "Dynamic")
)
})
output$input_type_text <- renderText({
input$input_type
})
output$dynamic_value <- renderPrint({
str(input$dynamic)
})
})
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('exp1.R')
runApp('gformmimick/abc.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('exp1.R')
runApp('gformmimick/abc.R')
runApp('exp1.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('exp1.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
install.packages("plotly")
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('C:/Users/BPO18/Downloads')
runApp('C:/Users/BPO18/Downloads/server.R')
runApp('C:/Users/BPO18/Downloads/server.R')
runApp('C:/Users/BPO18/Downloads/server.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
runApp('statevssalesvssalesman.R')
runApp('gformmimick/abc.R')
runApp('gformmimick/abc.R')
